name: Build Android APK

on:
  workflow_dispatch:  # Allows manually triggering the workflow from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest  # You can use ubuntu-latest, but macOS is better for M1 chips

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Gradle dependencies to speed up builds
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Decode google-services.json from secret
      - name: Decode google-services.json from secret
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Build the APK
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # Upload the APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug.apk
          path: ${project.layout.buildDirectory.get()}/outputs/apk/debug/app-debug.apk